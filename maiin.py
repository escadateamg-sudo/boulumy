import asyncio
import logging
import os
import time
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Set
from contextlib import asynccontextmanager

from aiogram import Bot, Dispatcher, Router, F
from aiogram.filters import Command, StateFilter, CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import (Message, CallbackQuery, InlineKeyboardButton,
                           InlineKeyboardMarkup, BotCommand,
                           ReplyKeyboardMarkup, KeyboardButton,
                           ReplyKeyboardRemove)
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.exceptions import TelegramBadRequest, TelegramForbiddenError

# –Ü–º–ø–æ—Ä—Ç –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
from database import Database

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
try:
    from dotenv import load_dotenv
    load_dotenv()
except ImportError:
    print("‚ö†Ô∏è python-dotenv –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")

# ===== –ö–û–ù–§–Ü–ì–£–†–ê–¶–Ü–Ø =====
BOT_TOKEN = os.getenv('BOT_TOKEN')

# –î–æ–¥–∞—Ç–∫–æ–≤–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
def validate_bot_token(token: str) -> bool:
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞ Telegram –±–æ—Ç–∞"""
    if not token:
        return False

    # –¢–æ–∫–µ–Ω –º–∞—î —Ñ–æ—Ä–º–∞—Ç: —á–∏—Å–ª–æ:—Å—Ç—Ä–æ–∫–∞ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 123456789:ABC-DEF1234ghIkl-zyx57W2v1u123ew11)
    parts = token.split(':')
    if len(parts) != 2:
        return False

    # –ü–µ—Ä—à–∞ —á–∞—Å—Ç–∏–Ω–∞ –º–∞—î –±—É—Ç–∏ —á–∏—Å–ª–æ–º
    try:
        int(parts[0])
    except ValueError:
        return False

    # –î—Ä—É–≥–∞ —á–∞—Å—Ç–∏–Ω–∞ –º–∞—î –±—É—Ç–∏ –Ω–µ –º–µ–Ω—à–µ 35 —Å–∏–º–≤–æ–ª—ñ–≤
    if len(parts[1]) < 35:
        return False

    return True

if not BOT_TOKEN:
    print("‚ùå –ü–û–ú–ò–õ–ö–ê: BOT_TOKEN –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!")
    print("üí° –°—Ç–≤–æ—Ä—ñ—Ç—å —Ñ–∞–π–ª .env –∑ –≤–º—ñ—Å—Ç–æ–º:")
    print("BOT_TOKEN=your_bot_token_here")
    print("ADMIN_ID=your_telegram_user_id")
    exit(1)

if not validate_bot_token(BOT_TOKEN):
    print("‚ùå –ü–û–ú–ò–õ–ö–ê: BOT_TOKEN –º–∞—î –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç!")
    print("üí° –¢–æ–∫–µ–Ω –º–∞—î –≤–∏–≥–ª—è–¥–∞—Ç–∏ —è–∫: 123456789:ABC-DEF1234ghIkl-zyx57W2v1u123ew11")
    print("ü§ñ –û—Ç—Ä–∏–º–∞–π—Ç–µ –Ω–æ–≤–∏–π —Ç–æ–∫–µ–Ω –≤—ñ–¥ @BotFather")
    exit(1)

try:
    ADMIN_ID = int(os.getenv('ADMIN_ID', '0'))
except ValueError:
    ADMIN_ID = 0
    print("‚ö†Ô∏è ADMIN_ID –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∞–±–æ –º–∞—î –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç")

ESCADA_CHANNEL = '@Escada_Ukraine'
ESCADA_CHANNEL_LINK = 'https://t.me/Escada_Ukraine'
ADMIN_CONTACT = 'Escada_m'

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏ –¥–ª—è –∞–Ω—Ç–∏—Å–ø–∞–º—É
RATE_LIMIT_THRESHOLD = 5  # max –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
RATE_LIMIT_WINDOW = 10  # –∑–∞ 10 —Å–µ–∫—É–Ω–¥
MESSAGE_COOLDOWN = 2  # –ø–∞—É–∑–∞ –º—ñ–∂ –∫–æ–º–∞–Ω–¥–∞–º–∏

# ===== –°–¢–ê–ù–ò FSM =====
class BotStates(StatesGroup):
    waiting_for_city = State()
    waiting_for_broadcast_message = State()
    waiting_for_rental_form = State()
    admin_menu = State()

# ===== –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø –õ–û–ì–Ü–ù–ì–£ =====
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot.log', encoding='utf-8'),
        logging.StreamHandler()
    ])
logger = logging.getLogger(__name__)

# ===== –Ü–ù–Ü–¶–Ü–ê–õ–Ü–ó–ê–¶–Ü–Ø =====
storage = MemoryStorage()

# –î–æ–¥–∞—Ç–∫–æ–≤–∞ –æ–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–∫–∏ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –±–æ—Ç–∞
try:
    bot = Bot(token=BOT_TOKEN,
              default=DefaultBotProperties(parse_mode=ParseMode.HTML))
    logger.info("‚úÖ –ë–æ—Ç —É—Å–ø—ñ—à–Ω–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ")
except Exception as e:
    logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –±–æ—Ç–∞: {e}")
    print(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –±–æ—Ç–∞: {e}")
    print("üí° –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ—Å—Ç—å BOT_TOKEN")
    exit(1)

dp = Dispatcher(storage=storage)
router = Router()
dp.include_router(router)

# –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö
db = Database()

# –ê–Ω—Ç–∏—Å–ø–∞–º —Å–∏—Å—Ç–µ–º–∞
user_message_counts: Dict[int, List[float]] = {}
last_message_times: Dict[int, float] = {}
blocked_users: Set[int] = set()

# –ö–µ—à –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—ñ–¥–ø–∏—Å–∫–∏
subscription_cache: Dict[int, tuple] = {}  # user_id: (is_subscribed, timestamp)
SUBSCRIPTION_CACHE_TTL = 300  # 5 —Ö–≤–∏–ª–∏–Ω

# –ö–µ—à –¥–ª—è –∑–∞–ø–æ–±—ñ–≥–∞–Ω–Ω—è –¥—É–±–ª—é–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
message_cache: Dict[str, str] = {}

# ===== –ê–ù–¢–ò–°–ü–ê–ú MIDDLEWARE =====
async def check_rate_limit(user_id: int) -> bool:
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ rate limit –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    if user_id in blocked_users:
        return False

    current_time = time.time()

    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ —Å–ø–∏—Å–æ–∫ –¥–ª—è –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    if user_id not in user_message_counts:
        user_message_counts[user_id] = []

    # –û—á–∏—â—É—î–º–æ —Å—Ç–∞—Ä—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (—Å—Ç–∞—Ä—à–µ RATE_LIMIT_WINDOW —Å–µ–∫—É–Ω–¥)
    user_message_counts[user_id] = [
        msg_time for msg_time in user_message_counts[user_id]
        if current_time - msg_time < RATE_LIMIT_WINDOW
    ]

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ cooldown –º—ñ–∂ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º–∏
    if user_id in last_message_times:
        if current_time - last_message_times[user_id] < MESSAGE_COOLDOWN:
            return False

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å —É –≤—ñ–∫–Ω—ñ
    if len(user_message_counts[user_id]) >= RATE_LIMIT_THRESHOLD:
        blocked_users.add(user_id)
        logger.warning(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏–π –∑–∞ —Å–ø–∞–º")
        return False

    # –î–æ–¥–∞—î–º–æ –ø–æ—Ç–æ—á–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    user_message_counts[user_id].append(current_time)
    last_message_times[user_id] = current_time

    return True

# ===== –î–û–ü–û–ú–Ü–ñ–ù–Ü –§–£–ù–ö–¶–Ü–á =====
async def find_city(city_input: str) -> Optional[Dict]:
    """–ü–æ—à—É–∫ –º—ñ—Å—Ç–∞ –ø–æ –≤–≤–µ–¥–µ–Ω–Ω—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    # –°–ø–æ—á–∞—Ç–∫—É —Ç–æ—á–Ω–∏–π –∑–±—ñ–≥
    city = await db.find_city_by_alias(city_input)
    if city:
        return city

    # –ü–æ—Ç—ñ–º –ø–æ –ø—Ä–µ—Ñ—ñ–∫—Å—É
    cities = await db.find_cities_by_prefix(city_input, 1)
    return cities[0] if cities else None

async def get_available_cities() -> List[Dict]:
    """–ü–æ–≤–µ—Ä—Ç–∞—î –º—ñ—Å—Ç–∞ –∑ –¥–æ—Å—Ç—É–ø–Ω–∏–º–∏ –∫–∞–Ω–∞–ª–∞–º–∏"""
    return await db.get_available_cities()

async def check_subscription_cached(user_id: int) -> bool:
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ–¥–ø–∏—Å–∫–∏ –∑ –∫–µ—à—É–≤–∞–Ω–Ω—è–º"""
    current_time = time.time()

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–µ—à
    if user_id in subscription_cache:
        is_subscribed, timestamp = subscription_cache[user_id]
        if current_time - timestamp < SUBSCRIPTION_CACHE_TTL:
            return is_subscribed

    # –†–æ–±–∏–º–æ –∑–∞–ø–∏—Ç –¥–æ API
    try:
        member = await bot.get_chat_member(ESCADA_CHANNEL, user_id)
        is_subscribed = member.status in ['member', 'administrator', 'creator']

        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ –∫–µ—à
        subscription_cache[user_id] = (is_subscribed, current_time)
        return is_subscribed

    except Exception as e:
        logger.warning(f"–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—ñ–¥–ø–∏—Å–∫–∏ –¥–ª—è {user_id}: {e}")
        return False

def create_main_keyboard() -> ReplyKeyboardMarkup:
    """–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é"""
    keyboard = [[KeyboardButton(text="üèô –û–±—Ä–∞—Ç–∏ –º—ñ—Å—Ç–æ")],
                [KeyboardButton(text="üìù –ó–¥–∞—Ç–∏ –∫–≤–∞—Ä—Ç–∏—Ä—É"),
                 KeyboardButton(text="üì¢ –ü—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è –Ω–∞ –∫–∞–Ω–∞–ª")],
                [KeyboardButton(text="‚úÖ –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –ø—ñ–¥–ø–∏—Å–∫—É"),
                 KeyboardButton(text="‚ÑπÔ∏è –î–æ–ø–æ–º–æ–≥–∞")]]
    return ReplyKeyboardMarkup(keyboard=keyboard,
                               resize_keyboard=True,
                               one_time_keyboard=False)

async def create_cities_keyboard() -> InlineKeyboardMarkup:
    """–°—Ç–≤–æ—Ä—é—î –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ –º—ñ—Å—Ç–∞–º–∏"""
    builder = InlineKeyboardBuilder()
    cities = await get_available_cities()

    # –†–æ–∑—Ç–∞—à–æ–≤—É—î–º–æ –º—ñ—Å—Ç–∞ –ø–æ 2 –≤ —Ä—è–¥—É
    for i in range(0, len(cities), 2):
        row = [
            InlineKeyboardButton(text=f"üèô {cities[i]['name_uk']}",
                                 callback_data=f"city_{cities[i]['code']}")
        ]
        if i + 1 < len(cities):
            row.append(
                InlineKeyboardButton(
                    text=f"üèô {cities[i + 1]['name_uk']}",
                    callback_data=f"city_{cities[i + 1]['code']}"))
        builder.row(*row)

    builder.row(
        InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é",
                             callback_data="back_to_menu"))
    return builder.as_markup()

def create_subscription_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –¥–ª—è –ø—ñ–¥–ø–∏—Å–∫–∏"""
    builder = InlineKeyboardBuilder()
    builder.button(text="üì¢ –ü—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è", url=ESCADA_CHANNEL_LINK)
    builder.button(text="‚úÖ –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –ø—ñ–¥–ø–∏—Å–∫—É",
                   callback_data="check_subscription")
    builder.button(text="üîô –ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é", callback_data="back_to_menu")
    builder.adjust(1)
    return builder.as_markup()

def create_admin_keyboard() -> InlineKeyboardMarkup:
    """–ê–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å"""
    builder = InlineKeyboardBuilder()
    builder.button(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")
    builder.button(text="üì© –†–æ–∑—Å–∏–ª–∫–∞", callback_data="admin_broadcast")
    builder.button(text="üë• –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ", callback_data="admin_users")
    builder.button(text="üîÑ –û—á–∏—Å—Ç–∏—Ç–∏ –∫–µ—à", callback_data="admin_clear_cache")
    builder.adjust(2)
    return builder.as_markup()

async def safe_edit_message(callback: CallbackQuery,
                            text: str,
                            reply_markup: InlineKeyboardMarkup = None):
    """–ë–µ–∑–ø–µ—á–Ω–µ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –ø–µ—Ä–µ–≤—ñ—Ä–∫–æ—é –¥—É–±–ª—é–≤–∞–Ω–Ω—è"""
    try:
        # –°—Ç–≤–æ—Ä—é—î–º–æ —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π –∫–ª—é—á –¥–ª—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        message_key = f"{callback.message.chat.id}_{callback.message.message_id}"

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –Ω–µ –Ω–∞–º–∞–≥–∞—î–º–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ —Ç–µ –∂ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        if message_cache.get(message_key) == text:
            await callback.answer()
            return

        await callback.message.edit_text(text, reply_markup=reply_markup)
        message_cache[message_key] = text

    except TelegramBadRequest as e:
        if "message is not modified" not in str(e).lower():
            logger.warning(f"–ü–æ–º–∏–ª–∫–∞ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")
        await callback.answer()
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è: {e}")
        try:
            await callback.message.answer(text, reply_markup=reply_markup)
        except Exception as e2:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e2}")

# ===== –û–ë–†–û–ë–ù–ò–ö–ò –ö–û–ú–ê–ù–î =====
@router.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    """–ö–æ–º–∞–Ω–¥–∞ /start"""
    user_id = message.from_user.id

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∞–Ω—Ç–∏—Å–ø–∞–º—É
    if not await check_rate_limit(user_id):
        return

    await state.clear()
    user = message.from_user

    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    await db.save_user(user.id, user.username, user.first_name)

    user_name = user.first_name or "–¥—Ä—É–∂–µ"
    welcome_text = (
        f"üëã <b>–í—ñ—Ç–∞—î–º–æ, {user_name}!</b>\n\n"
        f"üè† –ë–æ—Ç –¥–ª—è –ø–æ—à—É–∫—É –∫–∞–Ω–∞–ª—ñ–≤ –∑ –æ—Ä–µ–Ω–¥–æ—é –∂–∏—Ç–ª–∞ –±–µ–∑ –†—ñ–µ–ª—Ç–æ—Ä–∞\n\n"
        f"üìç –û–±–µ—Ä—ñ—Ç—å –ø–æ—Ç—Ä—ñ–±–Ω—É –¥—ñ—é –∑ –º–µ–Ω—é:")

    await message.answer(welcome_text, reply_markup=create_main_keyboard())

@router.message(F.text == "üèô –û–±—Ä–∞—Ç–∏ –º—ñ—Å—Ç–æ")
async def handle_select_city(message: Message, state: FSMContext):
    """–í–∏–±—ñ—Ä –º—ñ—Å—Ç–∞"""
    user_id = message.from_user.id

    if not await check_rate_limit(user_id):
        return

    text = "üèô <b>–û–±–µ—Ä—ñ—Ç—å –≤–∞—à–µ –º—ñ—Å—Ç–æ:</b>\n\n–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É –∑ –Ω–∞–∑–≤–æ—é –º—ñ—Å—Ç–∞ –Ω–∏–∂—á–µ:"
    keyboard = await create_cities_keyboard()
    await message.answer(text, reply_markup=keyboard)
    await state.set_state(BotStates.waiting_for_city)

@router.message(F.text == "üìù –ó–¥–∞—Ç–∏ –∫–≤–∞—Ä—Ç–∏—Ä—É")
async def handle_rent_apartment(message: Message):
    """–ó–¥–∞—á–∞ –∫–≤–∞—Ä—Ç–∏—Ä–∏"""
    user_id = message.from_user.id

    if not await check_rate_limit(user_id):
        return

    text = (f"üè† <b>–ó–¥–∞—á–∞ –∫–≤–∞—Ä—Ç–∏—Ä–∏</b>\n\n"
            f"üìù –î–ª—è —Ä–æ–∑–º—ñ—â–µ–Ω–Ω—è –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –ø—Ä–æ –∑–¥–∞—á—É –∫–≤–∞—Ä—Ç–∏—Ä–∏ "
            f"–∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –Ω–∞—à–æ–≥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n\n"
            f"üë§ {ADMIN_CONTACT}\n\n"
            f"–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –¥–æ–ø–æ–º–æ–∂–µ –≤–∞–º:\n"
            f"‚Ä¢ –û—Ñ–æ—Ä–º–∏—Ç–∏ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è\n"
            f"‚Ä¢ –†–æ–∑–º—ñ—Å—Ç–∏—Ç–∏ –≤ –ø–æ—Ç—Ä—ñ–±–Ω–æ–º—É –∫–∞–Ω–∞–ª—ñ\n"
            f"‚Ä¢ –í—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ –Ω–∞ –≤—Å—ñ –ø–∏—Ç–∞–Ω–Ω—è")

    builder = InlineKeyboardBuilder()
    builder.button(text="üë§ –ù–∞–ø–∏—Å–∞—Ç–∏ –∞–¥–º—ñ–Ω—É",
                   url=f"https://t.me/{ADMIN_CONTACT.replace('@', '')}")
    builder.button(text="üîô –ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é", callback_data="back_to_menu")
    builder.adjust(1)

    await message.answer(text, reply_markup=builder.as_markup())

@router.message(F.text == "üì¢ –ü—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è –Ω–∞ –∫–∞–Ω–∞–ª")
async def handle_subscribe(message: Message):
    """–ü—ñ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª"""
    user_id = message.from_user.id

    if not await check_rate_limit(user_id):
        return

    text = (f"üì¢ <b>–ì–æ–ª–æ–≤–Ω–∏–π –∫–∞–Ω–∞–ª Escada</b>\n\n"
            f"–ü—ñ–¥–ø–∏—à—ñ—Ç—å—Å—è –Ω–∞ –Ω–∞—à –≥–æ–ª–æ–≤–Ω–∏–π –∫–∞–Ω–∞–ª, —â–æ–± –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏:\n"
            f"‚Ä¢ –ù–æ–≤—ñ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –ø—Ä–æ –æ—Ä–µ–Ω–¥—É\n"
            f"‚Ä¢ –ö–æ—Ä–∏—Å–Ω—ñ –ø–æ—Ä–∞–¥–∏\n"
            f"‚Ä¢ –ù–æ–≤–∏–Ω–∏ —Ä–∏–Ω–∫—É –Ω–µ—Ä—É—Ö–æ–º–æ—Å—Ç—ñ\n\n"
            f"üì± {ESCADA_CHANNEL}")

    builder = InlineKeyboardBuilder()
    builder.button(text="üì¢ –ü—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è", url=ESCADA_CHANNEL_LINK)
    builder.button(text="üîô –ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é", callback_data="back_to_menu")
    builder.adjust(1)

    await message.answer(text, reply_markup=builder.as_markup())

@router.message(F.text == "‚úÖ –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –ø—ñ–¥–ø–∏—Å–∫—É")
async def handle_check_subscription(message: Message):
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ–¥–ø–∏—Å–∫–∏"""
    user_id = message.from_user.id

    if not await check_rate_limit(user_id):
        return

    is_subscribed = await check_subscription_cached(user_id)

    if is_subscribed:
        text = (
            f"‚úÖ <b>–í—ñ–¥–º—ñ–Ω–Ω–æ!</b>\n\n"
            f"–í–∏ –ø—ñ–¥–ø–∏—Å–∞–Ω—ñ –Ω–∞ {ESCADA_CHANNEL}\n\n"
            f"–¢–µ–ø–µ—Ä –º–æ–∂–µ—Ç–µ –æ–±–∏—Ä–∞—Ç–∏ –º—ñ—Å—Ç–æ —Ç–∞ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ –¥–æ—Å—Ç—É–ø –¥–æ –∫–∞–Ω–∞–ª—ñ–≤ –∑ –æ—Ä–µ–Ω–¥–æ—é –∂–∏—Ç–ª–∞!"
        )
    else:
        text = (
            f"‚ùå <b>–ü—ñ–¥–ø–∏—Å–∫—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ</b>\n\n"
            f"–î–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ –ø—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è –Ω–∞ –Ω–∞—à –≥–æ–ª–æ–≤–Ω–∏–π –∫–∞–Ω–∞–ª:\n\n"
            f"üì¢ {ESCADA_CHANNEL}")

    await message.answer(text, reply_markup=create_main_keyboard())

@router.message(F.text == "‚ÑπÔ∏è –î–æ–ø–æ–º–æ–≥–∞")
async def handle_help(message: Message):
    """–î–æ–ø–æ–º–æ–≥–∞ - –±–µ–∑ –¥—É–±–ª—é–≤–∞–Ω–Ω—è"""
    user_id = message.from_user.id

    if not await check_rate_limit(user_id):
        return

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –Ω–µ –≤—ñ–¥–ø—Ä–∞–≤–ª—è–ª–∏ –¥–æ–ø–æ–º–æ–≥—É –Ω–µ—â–æ–¥–∞–≤–Ω–æ
    help_key = f"help_{user_id}"
    current_time = time.time()

    if help_key in message_cache:
        last_help_time = float(message_cache[help_key])
        if current_time - last_help_time < 5:  # 5 —Å–µ–∫—É–Ω–¥ cooldown
            return

    message_cache[help_key] = str(current_time)

    help_text = (f"‚ÑπÔ∏è <b>–î–æ–≤—ñ–¥–∫–∞ –ø–æ –±–æ—Ç—É</b>\n\n"
                 f"üè† <b>–©–æ —Ä–æ–±–∏—Ç—å –±–æ—Ç:</b>\n"
                 f"‚Ä¢ –î–æ–ø–æ–º–∞–≥–∞—î –∑–Ω–∞–π—Ç–∏ –∫–∞–Ω–∞–ª–∏ –∑ –æ—Ä–µ–Ω–¥–æ—é –∂–∏—Ç–ª–∞\n"
                 f"‚Ä¢ –ü—ñ–¥–±–∏—Ä–∞—î –∫–∞–Ω–∞–ª –¥–ª—è –≤–∞—à–æ–≥–æ –º—ñ—Å—Ç–∞\n"
                 f"‚Ä¢ –î–æ–ø–æ–º–∞–≥–∞—î —Ä–æ–∑–º—ñ—Å—Ç–∏—Ç–∏ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è\n\n"
                 f"üìã <b>–Ø–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è:</b>\n"
                 f"1Ô∏è‚É£ –ü—ñ–¥–ø–∏—à—ñ—Ç—å—Å—è –Ω–∞ {ESCADA_CHANNEL}\n"
                 f"2Ô∏è‚É£ –û–±–µ—Ä—ñ—Ç—å –≤–∞—à–µ –º—ñ—Å—Ç–æ\n"
                 f"3Ô∏è‚É£ –û—Ç—Ä–∏–º–∞–π—Ç–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –∫–∞–Ω–∞–ª\n\n"
                 f"üÜò <b>–ü—ñ–¥—Ç—Ä–∏–º–∫–∞:</b> {ADMIN_CONTACT}\n"
                 f"üì¢ <b>–ì–æ–ª–æ–≤–Ω–∏–π –∫–∞–Ω–∞–ª:</b> {ESCADA_CHANNEL}")

    await message.answer(help_text, reply_markup=create_main_keyboard())

# ===== –ê–î–ú–Ü–ù–°–¨–ö–Ü –ö–û–ú–ê–ù–î–ò =====
@router.message(Command("admin"))
async def cmd_admin(message: Message, state: FSMContext):
    """–ê–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å"""
    if message.from_user.id != ADMIN_ID:
        await message.answer("‚ùå –í–∏–±–∞—á—Ç–µ, –∫–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–æ–∑–ø—ñ–∑–Ω–∞–Ω–∞")
        return

    await state.set_state(BotStates.admin_menu)

    users_count = await db.get_users_count()
    available_cities = len(await get_available_cities())
    text = (f"üëë <b>–ê–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å</b>\n\n"
            f"üë• –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: <b>{users_count}</b>\n"
            f"üèô –î–æ—Å—Ç—É–ø–Ω–∏—Ö –º—ñ—Å—Ç: <b>{available_cities}</b>\n"
            f"‚è∞ {datetime.now().strftime('%H:%M:%S %d.%m.%Y')}")

    await message.answer(text, reply_markup=create_admin_keyboard())

@router.message(Command("stats"))
async def cmd_stats(message: Message):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"""
    if message.from_user.id != ADMIN_ID:
        await message.answer("‚ùå –í–∏–±–∞—á—Ç–µ, –∫–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–æ–∑–ø—ñ–∑–Ω–∞–Ω–∞")
        return

    users_count = await db.get_users_count()
    available_cities = len(await get_available_cities())

    stats_text = (f"üìä <b>–î–µ—Ç–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n\n"
                  f"üë• –í—Å—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: <b>{users_count}</b>\n"
                  f"üèô –î–æ—Å—Ç—É–ø–Ω–∏—Ö –º—ñ—Å—Ç: <b>{available_cities}</b>\n"
                  f"üö´ –ó–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏—Ö –∑–∞ —Å–ø–∞–º: <b>{len(blocked_users)}</b>\n"
                  f"üíæ –ö–µ—à –ø—ñ–¥–ø–∏—Å–æ–∫: <b>{len(subscription_cache)}</b>\n"
                  f"üí¨ –ö–µ—à –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å: <b>{len(message_cache)}</b>")

    await message.answer(stats_text)

# ===== CALLBACK –û–ë–†–û–ë–ù–ò–ö–ò =====
@router.callback_query(F.data.startswith("city_"))
async def process_city_selection(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –º—ñ—Å—Ç–∞"""
    city_code = callback.data.replace("city_", "")
    user_id = callback.from_user.id

    # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –º—ñ—Å—Ç–∞ –∑ –ë–î
    city = await db.find_city_by_alias(city_code)
    if not city or not city['channel_url']:
        keyboard = await create_cities_keyboard()
        await safe_edit_message(
            callback,
            f"‚è≥ <b>–ú—ñ—Å—Ç–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ –∫–∞–Ω–∞–ª –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π</b>\n\n–û–±–µ—Ä—ñ—Ç—å —ñ–Ω—à–µ –º—ñ—Å—Ç–æ:",
            keyboard)
        return

    await state.update_data(selected_city=city_code, city_name=city['name_uk'])

    is_subscribed = await check_subscription_cached(user_id)

    if is_subscribed:
        await send_city_channel(callback, city, user_id)
        await state.clear()
    else:
        subscription_text = (
            f"üè† <b>–í–∏ –æ–±—Ä–∞–ª–∏: {city['name_uk']}</b>\n\n"
            f"‚ú® –î–ª—è –¥–æ—Å—Ç—É–ø—É –¥–æ –∫–∞–Ω–∞–ª—É —Å–ø–æ—á–∞—Ç–∫—É –ø—ñ–¥–ø–∏—à—ñ—Ç—å—Å—è –Ω–∞ –Ω–∞—à –≥–æ–ª–æ–≤–Ω–∏–π –∫–∞–Ω–∞–ª:\n\n"
            f"üì¢ <b>{ESCADA_CHANNEL}</b>")
        await safe_edit_message(callback, subscription_text,
                                create_subscription_keyboard())

    await callback.answer()

@router.callback_query(F.data == "check_subscription")
async def check_subscription_callback(callback: CallbackQuery,
                                      state: FSMContext):
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ–¥–ø–∏—Å–∫–∏ —á–µ—Ä–µ–∑ callback"""
    user_id = callback.from_user.id
    data = await state.get_data()
    city_code = data.get('selected_city')

    if not city_code:
        await callback.answer("‚ùå –ü–æ–º–∏–ª–∫–∞: –º—ñ—Å—Ç–æ –Ω–µ –æ–±—Ä–∞–Ω–æ", show_alert=True)
        return

    is_subscribed = await check_subscription_cached(user_id)

    if is_subscribed:
        # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –º—ñ—Å—Ç–∞
        city = await db.find_city_by_alias(city_code)
        if city:
            await send_city_channel(callback, city, user_id)
            await state.clear()
            await callback.answer("‚úÖ –ü—ñ–¥–ø–∏—Å–∫–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–∞!")
        else:
            await callback.answer("‚ùå –ü–æ–º–∏–ª–∫–∞: –º—ñ—Å—Ç–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ",
                                  show_alert=True)
    else:
        await callback.answer(
            "‚ùå –ü—ñ–¥–ø–∏—Å–∫—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –°–ø–æ—á–∞—Ç–∫—É –ø—ñ–¥–ø—ñ—à—ñ—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª!",
            show_alert=True)

@router.callback_query(F.data == "back_to_menu")
async def back_to_menu(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    await state.clear()

    text = (f"üè† <b>–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é</b>\n\n"
            f"–û–±–µ—Ä—ñ—Ç—å –ø–æ—Ç—Ä—ñ–±–Ω—É –¥—ñ—é –∑ –º–µ–Ω—é –Ω–∏–∂—á–µ:")

    await callback.message.edit_text(text)
    await callback.answer()

# ===== –ê–î–ú–Ü–ù–°–¨–ö–Ü CALLBACK'–∏ =====
@router.callback_query(F.data == "admin_stats")
async def admin_stats_callback(callback: CallbackQuery):
    """–î–µ—Ç–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –∞–¥–º—ñ–Ω–∞"""
    if callback.from_user.id != ADMIN_ID:
        await callback.answer("‚ùå –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É", show_alert=True)
        return

    # –õ–æ–≥—É—î–º–æ –¥—ñ—é –∞–¥–º—ñ–Ω–∞
    await db.log_admin_action(callback.from_user.id, 'view_stats')

    stats = await db.get_admin_stats()
    available_cities = len(await get_available_cities())

    stats_text = (f"üìä <b>–†–æ–∑—à–∏—Ä–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n"
                  f"üë• –í—Å—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: <b>{stats['total_users']}</b>\n"
                  f"‚úÖ –ê–∫—Ç–∏–≤–Ω–∏—Ö: <b>{stats['active_users']}</b>\n"
                  f"üö´ –ó–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏—Ö: <b>{stats['blocked_users']}</b>\n"
                  f"üì§ –í—ñ–¥–ø–∏—Å–∞–ª–æ—Å—å: <b>{stats['total_unsubscriptions']}</b>\n\n"
                  f"üìà <b>–ó–∞ 7 –¥–Ω—ñ–≤:</b>\n"
                  f"üÜï –ù–æ–≤–∏—Ö: <b>{stats['new_users_7d']}</b>\n"
                  f"üëã –ü—ñ—à–ª–æ: <b>{stats['unsubscribed_7d']}</b>\n\n"
                  f"üèô –î–æ—Å—Ç—É–ø–Ω–∏—Ö –º—ñ—Å—Ç: <b>{available_cities}</b>\n"
                  f"üíæ –ö–µ—à –ø—ñ–¥–ø–∏—Å–æ–∫: <b>{len(subscription_cache)}</b>\n"
                  f"‚è∞ –û–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%H:%M:%S')}")

    # –î–æ–¥–∞—î–º–æ —Ç–æ–ø –º—ñ—Å—Ç —è–∫—â–æ —î
    if stats.get('top_cities'):
        stats_text += f"\n\nüî• <b>–¢–æ–ø –º—ñ—Å—Ç (30 –¥–Ω—ñ–≤):</b>\n"
        for i, city_stat in enumerate(stats['top_cities'][:5], 1):
            stats_text += f"{i}. {city_stat['city_name_uk']}: <b>{city_stat['count']}</b>\n"

    await safe_edit_message(callback, stats_text, create_admin_keyboard())

@router.callback_query(F.data == "admin_broadcast")
async def admin_broadcast_callback(callback: CallbackQuery, state: FSMContext):
    """–†–æ–∑—Å–∏–ª–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å"""
    if callback.from_user.id != ADMIN_ID:
        await callback.answer("‚ùå –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É", show_alert=True)
        return

    users_count = await db.get_users_count()

    text = (f"üì¢ <b>–†–æ–∑—Å–∏–ª–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å</b>\n\n"
            f"üë• –ê–∫—Ç–∏–≤–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: <b>{users_count}</b>\n\n"
            f"üìù –ù–∞–¥—ñ—à–ª—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏:\n\n"
            f"‚úÖ <b>–ü—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è:</b>\n"
            f"‚Ä¢ –¢–µ–∫—Å—Ç–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è\n"
            f"‚Ä¢ –§–æ—Ç–æ –∑ –ø—ñ–¥–ø–∏—Å–æ–º\n"
            f"‚Ä¢ –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è HTML\n\n"
            f"‚ùå –î–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è: /cancel")

    await safe_edit_message(callback, text)
    await state.set_state(BotStates.waiting_for_broadcast_message)
    await callback.answer()

@router.callback_query(F.data == "admin_users")
async def admin_users_callback(callback: CallbackQuery):
    """–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤"""
    if callback.from_user.id != ADMIN_ID:
        await callback.answer("‚ùå –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É", show_alert=True)
        return

    stats = await db.get_admin_stats()

    text = (f"üë• <b>–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤</b>\n\n"
            f"–í—Å—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: <b>{stats['total_users']}</b>\n"
            f"–ê–∫—Ç–∏–≤–Ω–∏—Ö: <b>{stats['active_users']}</b>\n"
            f"–ó–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏—Ö: <b>{stats['blocked_users']}</b>\n"
            f"–í—ñ–¥–ø–∏—Å–∞–ª–æ—Å—å: <b>{stats['total_unsubscriptions']}</b>\n\n"
            f"üìà <b>–ó–∞ –æ—Å—Ç–∞–Ω–Ω—ñ–π —Ç–∏–∂–¥–µ–Ω—å:</b>\n"
            f"–ù–æ–≤–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: <b>{stats['new_users_7d']}</b>\n"
            f"–í—ñ–¥–ø–∏—Å–∞–ª–æ—Å—å: <b>{stats['unsubscribed_7d']}</b>")

    await safe_edit_message(callback, text, create_admin_keyboard())

@router.callback_query(F.data == "admin_clear_cache")
async def admin_clear_cache(callback: CallbackQuery):
    """–û—á–∏—â–µ–Ω–Ω—è –∫–µ—à—É"""
    if callback.from_user.id != ADMIN_ID:
        await callback.answer("‚ùå –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É", show_alert=True)
        return

    # –û—á–∏—â—É—î–º–æ –≤—Å—ñ –∫–µ—à—ñ
    subscription_cache.clear()
    message_cache.clear()
    blocked_users.clear()
    user_message_counts.clear()
    last_message_times.clear()

    await callback.answer("‚úÖ –í—Å—ñ –∫–µ—à—ñ –æ—á–∏—â–µ–Ω–æ!", show_alert=True)

# ===== –û–ë–†–û–ë–ù–ò–ö –†–û–ó–°–ò–õ–ö–ò =====
@router.message(StateFilter(BotStates.waiting_for_broadcast_message))
async def process_broadcast(message: Message, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ —Ä–æ–∑—Å–∏–ª–∫–∏ –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é —Ñ–æ—Ç–æ"""
    if message.from_user.id != ADMIN_ID:
        return

    users = await db.get_all_users()

    if not users:
        await message.answer("‚ùå –ù–µ–º–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏")
        await state.clear()
        return

    # –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ç–∏–ø –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    is_photo = message.photo is not None
    text_content = message.caption if is_photo else message.text
    photo_file_id = message.photo[-1].file_id if is_photo else None

    # –í–∞–ª—ñ–¥–∞—Ü—ñ—è –∫–æ–Ω—Ç–µ–Ω—Ç—É
    if not text_content and not is_photo:
        await message.answer("‚ùå –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–µ –º—ñ—Å—Ç–∏—Ç—å —Ç–µ–∫—Å—Ç—É –∞–±–æ —Ñ–æ—Ç–æ")
        return

    status_msg = await message.answer(
        f"üì§ <b>–†–æ–∑–ø–æ—á–∏–Ω–∞—é —Ä–æ–∑—Å–∏–ª–∫—É...</b>\n\n"
        f"üë• –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {len(users)}\n"
        f"üìÑ –¢–∏–ø: {'—Ñ–æ—Ç–æ –∑ —Ç–µ–∫—Å—Ç–æ–º' if is_photo else '—Ç–µ–∫—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è'}")

    sent = 0
    failed = 0
    blocked = 0

    for user in users:
        try:
            if is_photo:
                await bot.send_photo(chat_id=user['user_id'],
                                     photo=photo_file_id,
                                     caption=text_content)
            else:
                await bot.send_message(user['user_id'], text_content)

            sent += 1

        except TelegramForbiddenError:
            blocked += 1
            # –ë–ª–æ–∫—É—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ –ë–î
            await db.set_user_blocked(user['user_id'], True, 'blocked')
        except Exception as e:
            failed += 1
            logger.warning(
                f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user['user_id']}: {e}")

        # –ê–Ω—Ç–∏—Å–ø–∞–º –∑–∞—Ç—Ä–∏–º–∫–∞
        await asyncio.sleep(0.05)

        # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å –∫–æ–∂–Ω—ñ 10 –≤—ñ–¥–ø—Ä–∞–≤–æ–∫
        if (sent + failed + blocked) % 10 == 0:
            try:
                await status_msg.edit_text(
                    f"üì§ <b>–†–æ–∑—Å–∏–ª–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—ñ...</b>\n\n"
                    f"‚úÖ –í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent}\n"
                    f"‚ùå –ü–æ–º–∏–ª–æ–∫: {failed}\n"
                    f"üö´ –ó–∞–±–ª–æ–∫—É–≤–∞–ª–∏: {blocked}\n"
                    f"üìä –ü—Ä–æ–≥—Ä–µ—Å: {sent + failed + blocked}/{len(users)}")
            except:
                pass

    message_type = "—Ñ–æ—Ç–æ" if is_photo else "—Ç–µ–∫—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"
    final_text = (
        f"‚úÖ <b>–†–æ–∑—Å–∏–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
        f"üì§ –í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ: <b>{sent}</b>\n"
        f"‚ùå –ü–æ–º–∏–ª–æ–∫: <b>{failed}</b>\n"
        f"üö´ –ó–∞–±–ª–æ–∫—É–≤–∞–ª–∏ –±–æ—Ç–∞: <b>{blocked}</b>\n"
        f"üìÑ –¢–∏–ø: <b>{message_type}</b>\n\n"
        f"üìä –£—Å–ø—ñ—à–Ω—ñ—Å—Ç—å: <b>{sent/(sent+failed+blocked)*100:.1f}%</b>")

    await status_msg.edit_text(final_text)
    await state.clear()

# ===== –î–û–ü–û–ú–Ü–ñ–ù–ê –§–£–ù–ö–¶–Ü–Ø =====
async def send_city_channel(callback: CallbackQuery, city: Dict, user_id: int):
    """–í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –∫–∞–Ω–∞–ª"""
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–∞–Ω—ñ –≤ –ë–î
    await db.update_user_city(callback.from_user.id, city['code'],
                              city['name_uk'])

    success_text = (f"‚úÖ <b>–î—è–∫—É—î–º–æ –∑–∞ –ø—ñ–¥–ø–∏—Å–∫—É!</b>\n\n"
                    f"üè† <b>–í–∞—à–µ –º—ñ—Å—Ç–æ: {city['name_uk']}</b>\n\n"
                    f"üì¢ –û—Å—å –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –∫–∞–Ω–∞–ª –∑ –æ—Ä–µ–Ω–¥–æ—é –∂–∏—Ç–ª–∞:")

    builder = InlineKeyboardBuilder()
    builder.button(text=f"üîó –ö–∞–Ω–∞–ª {city['name_uk']}", url=city['channel_url'])
    builder.button(text="üèô –û–±—Ä–∞—Ç–∏ —ñ–Ω—à–µ –º—ñ—Å—Ç–æ", callback_data="back_to_menu")
    builder.button(text="üìù –ó–¥–∞—Ç–∏ –∫–≤–∞—Ä—Ç–∏—Ä—É",
                   url=f"https://t.me/{ADMIN_CONTACT}")
    builder.adjust(1)

    await safe_edit_message(callback, success_text, builder.as_markup())

# ===== –û–ë–†–û–ë–ù–ò–ö–ò –¢–ï–ö–°–¢–û–í–ò–• –ü–û–í–Ü–î–û–ú–õ–ï–ù–¨ =====
@router.message(StateFilter(BotStates.waiting_for_city))
async def handle_city_text_input(message: Message, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω—è –º—ñ—Å—Ç–∞ —Ç–µ–∫—Å—Ç–æ–º"""
    user_id = message.from_user.id

    if not await check_rate_limit(user_id):
        return

    city_input = message.text.strip()
    city = await find_city(city_input)

    if city and city['channel_url']:
        # –ú—ñ—Å—Ç–æ –∑–Ω–∞–π–¥–µ–Ω–æ —ñ –∫–∞–Ω–∞–ª –¥–æ—Å—Ç—É–ø–Ω–∏–π
        is_subscribed = await check_subscription_cached(user_id)

        if is_subscribed:
            await db.update_user_city(user_id, city['code'], city['name_uk'])

            text = (f"‚úÖ <b>–ó–Ω–∞–π–¥–µ–Ω–æ: {city['name_uk']}</b>\n\n"
                    f"üì¢ –û—Å—å –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –∫–∞–Ω–∞–ª:")

            builder = InlineKeyboardBuilder()
            builder.button(text=f"üîó –ö–∞–Ω–∞–ª {city['name_uk']}",
                           url=city['channel_url'])
            builder.button(text="üîô –ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é",
                           callback_data="back_to_menu")
            builder.adjust(1)

            await message.answer(text, reply_markup=builder.as_markup())
            await state.clear()
        else:
            await state.update_data(selected_city=city['code'],
                                    city_name=city['name_uk'])

            subscription_text = (
                f"üè† <b>–ó–Ω–∞–π–¥–µ–Ω–æ: {city['name_uk']}</b>\n\n"
                f"‚ú® –î–ª—è –¥–æ—Å—Ç—É–ø—É –¥–æ –∫–∞–Ω–∞–ª—É —Å–ø–æ—á–∞—Ç–∫—É –ø—ñ–¥–ø—ñ—à—ñ—Ç—å—Å—è:\n\n"
                f"üì¢ <b>{ESCADA_CHANNEL}</b>")

            await message.answer(subscription_text,
                                 reply_markup=create_subscription_keyboard())
    elif city:
        # –ú—ñ—Å—Ç–æ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–ª–µ –∫–∞–Ω–∞–ª –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π
        keyboard = await create_cities_keyboard()
        await message.answer(
            f"‚è≥ <b>–ú—ñ—Å—Ç–æ: {city['name_uk']}</b>\n\n"
            f"‚ùóÔ∏è –ö–∞–Ω–∞–ª –¥–ª—è —Ü—å–æ–≥–æ –º—ñ—Å—Ç–∞ –ø–æ–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π.\n\n"
            f"–û–±–µ—Ä—ñ—Ç—å —ñ–Ω—à–µ –º—ñ—Å—Ç–æ:",
            reply_markup=keyboard)
    else:
        # –ú—ñ—Å—Ç–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ
        keyboard = await create_cities_keyboard()
        await message.answer(
            f"‚ùå <b>–ú—ñ—Å—Ç–æ '{city_input}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ</b>\n\n"
            f"üí° <b>–ü–æ—Ä–∞–¥–∏:</b>\n"
            f"‚Ä¢ –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–Ω—è\n"
            f"‚Ä¢ –°–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤–Ω—É –Ω–∞–∑–≤—É –º—ñ—Å—Ç–∞\n"
            f"‚Ä¢ –û–±–µ—Ä—ñ—Ç—å –∑—ñ —Å–ø–∏—Å–∫—É –Ω–∏–∂—á–µ:",
            reply_markup=keyboard)

@router.message(Command("cancel"))
async def cmd_cancel(message: Message, state: FSMContext):
    """–°–∫–∞—Å—É–≤–∞–Ω–Ω—è –¥—ñ—ó"""
    current_state = await state.get_state()
    await state.clear()

    if current_state:
        await message.answer(
            "‚ùå <b>–î—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ</b>\n\nüîÑ –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é:",
            reply_markup=create_main_keyboard())
    else:
        await message.answer("‚úÖ –ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –¥—ñ–π –¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è")

# ===== –û–ë–†–û–ë–ù–ò–ö –ù–ï–í–Ü–î–û–ú–ò–• –ö–û–ú–ê–ù–î =====
@router.message(F.text.startswith('/'))
async def handle_unknown_commands(message: Message):
    """–û–±—Ä–æ–±–Ω–∏–∫ –Ω–µ–≤—ñ–¥–æ–º–∏—Ö –∫–æ–º–∞–Ω–¥"""
    await message.answer("‚ùå –í–∏–±–∞—á—Ç–µ, –∫–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–æ–∑–ø—ñ–∑–Ω–∞–Ω–∞")

# ===== –û–ë–†–û–ë–ù–ò–ö –Ü–ù–®–ò–• –ü–û–í–Ü–î–û–ú–õ–ï–ù–¨ =====
@router.message()
async def handle_other_messages(message: Message):
    """–û–±—Ä–æ–±–Ω–∏–∫ –≤—Å—ñ—Ö —ñ–Ω—à–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å"""
    user_id = message.from_user.id

    if not await check_rate_limit(user_id):
        return

    user_name = message.from_user.first_name or "–¥—Ä—É–∂–µ"

    help_text = (f"üëã <b>–ü—Ä–∏–≤—ñ—Ç, {user_name}!</b>\n\n"
                 f"üè† –¶–µ–π –±–æ—Ç –¥–æ–ø–æ–º–∞–≥–∞—î –∑–Ω–∞—Ö–æ–¥–∏—Ç–∏ –∫–∞–Ω–∞–ª–∏ –∑ –æ—Ä–µ–Ω–¥–æ—é –∂–∏—Ç–ª–∞.\n\n"
                 f"üöÄ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –º–µ–Ω—é –Ω–∏–∂—á–µ –¥–ª—è –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó:")

    await message.answer(help_text, reply_markup=create_main_keyboard())

# ===== –§–£–ù–ö–¶–Ü–á –ó–ê–ü–£–°–ö–£ =====
async def set_bot_commands():
    """–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞"""
    commands = [
        BotCommand(command="start", description="üöÄ –ü–æ—á–∞—Ç–∏ —Ä–æ–±–æ—Ç—É"),
        BotCommand(command="help", description="‚ÑπÔ∏è –î–æ–≤—ñ–¥–∫–∞"),
        BotCommand(command="cancel", description="‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏ –¥—ñ—é"),
    ]
    await bot.set_my_commands(commands)

async def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –∑–∞–ø—É—Å–∫—É"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")

    try:
        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –ë–î
        await db.init_pool()
        logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞")

        # –ó–∞–ø–æ–≤–Ω—é—î–º–æ –ø–æ—á–∞—Ç–∫–æ–≤—ñ –¥–∞–Ω—ñ
        await db.seed_cities_data()

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –±–æ—Ç–∞
        try:
            bot_info = await bot.get_me()
            logger.info(f"‚úÖ –ë–æ—Ç –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ: @{bot_info.username}")
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ API Telegram: {e}")
            print("‚ùå –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ—Å—Ç—å BOT_TOKEN —Ç–∞ –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º")
            return

        # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –∫–æ–º–∞–Ω–¥–∏
        await set_bot_commands()

        # –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –∞–¥–º—ñ–Ω–∞ –ø—Ä–æ –∑–∞–ø—É—Å–∫
        if ADMIN_ID:
            try:
                await bot.send_message(
                    ADMIN_ID, f"üöÄ <b>–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ!</b>\n\n"
                    f"ü§ñ @{bot_info.username}\n"
                    f"‚è∞ {datetime.now().strftime('%H:%M:%S %d.%m.%Y')}\n"
                    f"üë§ –ö–æ–Ω—Ç–∞–∫—Ç: {ADMIN_CONTACT}\n"
                    f"üõ° –ê–Ω—Ç–∏—Å–ø–∞–º: –∞–∫—Ç–∏–≤–Ω–∏–π")
            except Exception as e:
                logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –ø–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –∞–¥–º—ñ–Ω–∞: {e}")

        # –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ —Å—Ç–∞—Ä—ñ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
        await bot.delete_webhook(drop_pending_updates=True)
        logger.info("‚úÖ –°—Ç–∞—Ä—ñ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ–ø—É—â–µ–Ω–æ")

        # –ó–∞–ø—É—Å–∫–∞—î–º–æ polling
        logger.info("üîÑ –ó–∞–ø—É—Å–∫ polling...")
        await dp.start_polling(bot)

    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
        raise
    finally:
        await db.close()
        logger.info("üõë –ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–æ")

if __name__ == "__main__":
    print("ü§ñ Telegram –±–æ—Ç –¥–ª—è –ø–æ—à—É–∫—É –∂–∏—Ç–ª–∞")
    print(f"üë§ –ö–æ–Ω—Ç–∞–∫—Ç –∞–¥–º—ñ–Ω–∞: {ADMIN_CONTACT}")
    print("=" * 50)

    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\n‚úÖ –ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º")
    except Exception as e:
        print(f"\nüí• –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
        exit(1)